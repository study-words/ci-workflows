name: main-tests

on:
  workflow_call:
    secrets:
      NPM_TOKEN:
        required: true
      GH_PAT:
        required: true

jobs:
  unit-tests:
    name: Unit & Lint Checks (main)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com/'

      - name: Auth to GitHub Packages
        run: |
          echo "@study-words:registry=https://npm.pkg.github.com" > ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc

      - run: npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - run: npm run lint
      - run: npm run test:unit
      - run: npm run test:unit:coverage

      - name: Enforce unit coverage
        run: |
          COVERAGE=$(node -e "console.log(require('./coverage/coverage-summary.json').total.lines.pct)")
          echo "Unit coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 90" | bc -l) )); then
            echo "Coverage too low"
            exit 1
          fi

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - run: docker compose up -d

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if nc -z 127.0.0.1 3306; then echo "MySQL up"; break; fi
            sleep 2
          done

      - uses: actions/setup-node@v4
        with:
          node-version: '18'

      - run: |
          echo "@study-words:registry=https://npm.pkg.github.com" > ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc

      - run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - run: npm run test:integration
        env:
          DB_TEST_HOST: 127.0.0.1
          DB_TEST_PORT: 3306
          DB_TEST_USERNAME: root
          DB_TEST_PASSWORD: root
          DB_TEST_DATABASE: test_db
          DB_TEST_DIALECT: mysql

      - run: npm run test:integration:coverage
        env:
          DB_TEST_HOST: 127.0.0.1
          DB_TEST_PORT: 3306
          DB_TEST_USERNAME: root
          DB_TEST_PASSWORD: root
          DB_TEST_DATABASE: test_db
          DB_TEST_DIALECT: mysql

      - name: Enforce integration coverage
        run: |
          COVERAGE=$(node -e "console.log(require('./coverage/coverage-summary.json').total.lines.pct)")
          echo "Integration coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 90" | bc -l) )); then
            echo "Coverage too low"
            exit 1
          fi

      - if: always()
        run: docker compose down
